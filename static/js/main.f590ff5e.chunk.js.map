{"version":3,"sources":["assets/backgroundImage.svg","Header.js","firebase.js","GetCheckboxInfo.js","ClearAllCheckbox.js","AddHabit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","src","backgroundImage","alt","className","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","GetCheckboxInfo","handleCheckOnChange","e","habitDay","target","id","dbRef","database","ref","child","props","habitValue","habitId","once","then","snapshot","set","val","plain","shape","color","icon","animation","checked","this","habitName","sunday","onChange","monday","tuesday","wednesday","thursday","friday","saturday","ClearAllCheckbox","handleOnClear","habitTracker","forEach","habit","onClick","AddHabit","handleChange","setState","userInput","value","handleSubmit","preventDefault","habitToAdd","state","newHabitThing","push","deleteHabit","remove","on","habits","newHabit","key","habitObject","map","i","onSubmit","htmlFor","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f590ff5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backgroundImage.2cace332.svg\";","import React, { Component } from 'react';\nimport backgroundImage from './assets/backgroundImage.svg'\n\nclass Header extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Habit Tracker</h1>\n        <h2>Hello! Let's keep track of your daily habits below.</h2>\n        <img src={backgroundImage} alt=\"\" className=\"backgroundImage\" />\n        <div className=\"datesContainer\">\n          <div className=\"dates\">\n            <h3 className=\"dateName\">S</h3>\n            <h3 className=\"dateName\">M</h3>\n            <h3 className=\"dateName\">T</h3>\n            <h3 className=\"dateName\">W</h3>\n            <h3 className=\"dateName\">T</h3>\n            <h3 className=\"dateName\">F</h3>\n            <h3 className=\"dateName\">S</h3>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Header;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAGQAWV2ab2nyKVFlrgiC0iM31eJHBY9qg\",\n  authDomain: \"sharon-yi-project-five.firebaseapp.com\",\n  databaseURL: \"https://sharon-yi-project-five.firebaseio.com\",\n  projectId: \"sharon-yi-project-five\",\n  storageBucket: \"sharon-yi-project-five.appspot.com\",\n  messagingSenderId: \"904259431353\",\n  appId: \"1:904259431353:web:eb9005fae3099c4792e468\",\n  measurementId: \"G-6JYB1TDCRD\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport { Checkbox } from 'pretty-checkbox-react';\n\nclass GetCheckboxInfo extends Component {\n\n  handleCheckOnChange = (e) => {\n    const habitDay = e.target.id\n    //access the database \n    const dbRef = firebase.database().ref();\n    //access the node that is identified by the id\n    //and get the 'sunday' of the id\n    dbRef.child(this.props.habitValue.habitId).child(habitDay).once('value').then((snapshot) => {\n      dbRef.child(this.props.habitValue.habitId).child(habitDay).set(!snapshot.val())\n    })\n  }\n  //change the value to be the opposite\n\n  render() {\n    return (\n      <form className=\"checkDate\">\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"sunday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.sunday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"monday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.monday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"tuesday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.tuesday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"wednesday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.wednesday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"thursday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.thursday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"friday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.friday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n        <Checkbox plain shape=\"round\" color=\"warning-o\" icon={<i className=\"fas fa-check-circle\"></i>} animation=\"tada\"\n          id=\"saturday\"\n          className=\"individualCheckbox\"\n          checked={this.props.habitValue.habitName.saturday}\n          onChange={this.handleCheckOnChange}></Checkbox>\n      </form>\n    );\n  }\n}\n\nexport default GetCheckboxInfo;","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass ClearAllCheckbox extends Component {\n\n  handleOnClear = (e) => {\n    const dbRef = firebase.database().ref();\n\n    this.props.habitTracker.forEach((habit) => {\n      dbRef.child(habit.habitId).child('sunday').set(false);\n      dbRef.child(habit.habitId).child('monday').set(false);\n      dbRef.child(habit.habitId).child('tuesday').set(false);\n      dbRef.child(habit.habitId).child('wednesday').set(false);\n      dbRef.child(habit.habitId).child('thursday').set(false);\n      dbRef.child(habit.habitId).child('friday').set(false);\n      dbRef.child(habit.habitId).child('saturday').set(false);\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"resetWeeks\" onClick={this.handleOnClear}>Start new week</button>\n      </div>\n    )\n  }\n}\n\nexport default ClearAllCheckbox;\n\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './App.css';\nimport GetCheckboxInfo from './GetCheckboxInfo';\nimport ClearAllCheckbox from './ClearAllCheckbox';\n\nclass AddHabit extends Component {\n  constructor() {\n    super();\n    this.state = {\n      habitTracker: [],\n      userInput: '',\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (snapshot) => {\n      const habits = snapshot.val();\n\n      const newHabit = []\n      for (let key in habits) {\n        const habitObject = {\n          habitId: key,\n          habitName: habits[key]\n        }\n        newHabit.push(habitObject)\n      }\n      this.setState({\n        habitTracker: newHabit\n      })\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const habitToAdd = this.state.userInput;\n\n    const dbRef = firebase.database().ref();\n\n    if (habitToAdd !== '') {\n      const newHabitThing = {\n        habitName: habitToAdd,\n        sunday: false,\n        monday: false,\n        tuesday: false,\n        wednesday: false,\n        thursday: false,\n        friday: false,\n        saturday: false\n      }\n      dbRef.push(newHabitThing)\n      this.setState({\n        userInput: ''\n      })\n    }\n  }\n\n  deleteHabit = habitId => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(habitId).remove();\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.state.habitTracker.map((habitValue, i) => {\n            return (\n              <div className=\"habitAndDelete\" key={i}>\n                <span\n                  id={habitValue.habitId}\n                  className=\"deleteHabit\"\n                  onClick={() => this.deleteHabit(habitValue.habitId)}>\n                  <i className=\"fas fa-trash-alt\"></i>\n                </span>\n                <ul>\n                  <li className=\"habitItem\">\n                    {habitValue.habitName.habitName}\n                    <GetCheckboxInfo habitValue={habitValue} />\n                  </li>\n                </ul>\n              </div>\n            )\n          })}\n        </ul>\n        <form onSubmit={this.handleSubmit} className=\"addHabitInput\">\n          <label htmlFor=\"habitName\"></label>\n          <input id=\"habitName\" type=\"text\" onChange={this.handleChange} value={this.state.userInput} />\n          <button type=\"submit\">Add habit</button>\n        </form>\n        <ClearAllCheckbox habitTracker={this.state.habitTracker}/>\n      </div>\n    )\n  }\n}\n\nexport default AddHabit;","import React, { Component } from 'react';\nimport './styles/styles.scss';\nimport Header from './Header';\nimport AddHabit from './AddHabit';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <AddHabit />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}